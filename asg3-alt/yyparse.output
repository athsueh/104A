Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_FIELD
   TOK_ROOT
   TOK_RETURNVOID
   TOK_PARAM
   TOK_PROTOTYPE
   TOK_DECLID
   TOK_NEWSTRING
   TOK_VARDECL
   TOK_INDEX
   TOK_FUNCTION


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structdh '}'

    9 structdh: structdh fielddecl ';'
   10         | TOK_STRUCT TOK_IDENT '{'

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT
   12          | basetype TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_TYPEID
   19         | TOK_IDENT

   20 function: identdecl paramhead ')' block

   21 paramhead: paramhead ',' identdecl
   22          | '(' identdecl
   23          | '('

   24 identdecl: basetype TOK_ARRAY TOK_IDENT
   25          | basetype TOK_IDENT

   26 block: blockhead '}'
   27      | '{' '}'
   28      | ';'

   29 blockhead: blockhead statement
   30          | '{' statement

   31 statement: block
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'

   37 vardecl: identdecl '=' expr ';'

   38 while: whilehead statement

   39 whilehead: TOK_WHILE '(' expr ')'

   40 ifelse: TOK_IF '(' expr ')' statement
   41       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   42 return: TOK_RETURN expr ';'
   43       | TOK_RETURN ';'

   44 expr: binop
   45     | unop
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: expr TOK_IFELSE expr
   52      | expr TOK_EQ expr
   53      | expr TOK_NE expr
   54      | expr TOK_LT expr
   55      | expr TOK_LE expr
   56      | expr TOK_GT expr
   57      | expr TOK_GE expr
   58      | expr '+' expr
   59      | expr '-' expr
   60      | expr '*' expr
   61      | expr '/' expr
   62      | expr '%' expr
   63      | expr '=' expr

   64 unop: '!' expr
   65     | '-' expr
   66     | '+' expr
   67     | TOK_ORD expr
   68     | TOK_CHR expr

   69 allocator: TOK_NEW TOK_IDENT '(' ')'
   70          | TOK_NEW TOK_STRING '(' expr ')'
   71          | TOK_NEW basetype '[' expr ']'

   72 call: TOK_IDENT '(' ')'
   73     | TOK_IDENT callargs ')'

   74 callargs: '(' expr
   75         | callargs ',' expr

   76 variable: TOK_IDENT
   77         | expr '.' expr
   78         | expr '[' expr ']'

   79 constant: TOK_INTCON
   80         | TOK_CHARCON
   81         | TOK_STRINGCON
   82         | TOK_FALSE
   83         | TOK_TRUE
   84         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37) 62
'(' (40) 22 23 39 40 41 48 69 70 72 74
')' (41) 20 39 40 41 48 69 70 72 73
'*' (42) 60
'+' (43) 58 66
',' (44) 21 75
'-' (45) 59 65
'.' (46) 77
'/' (47) 61
';' (59) 6 9 28 36 37 42 43
'=' (61) 37 63
'[' (91) 71 78
']' (93) 71 78
'{' (123) 10 27 30
'}' (125) 5 8 26 27
error (256) 5 6
TOK_VOID (258) 13
TOK_BOOL (259) 14
TOK_CHAR (260) 15
TOK_INT (261) 16
TOK_STRING (262) 17 70
TOK_IF (263) 40 41
TOK_ELSE (264) 41
TOK_WHILE (265) 39
TOK_RETURN (266) 42 43
TOK_STRUCT (267) 10
TOK_FALSE (268) 82
TOK_TRUE (269) 83
TOK_NULL (270) 84
TOK_NEW (271) 69 70 71
TOK_ARRAY (272) 11 24
TOK_EQ (273) 52
TOK_NE (274) 53
TOK_LT (275) 54
TOK_LE (276) 55
TOK_GT (277) 56
TOK_GE (278) 57
TOK_IDENT (279) 10 11 12 19 24 25 69 72 73 76
TOK_INTCON (280) 79
TOK_CHARCON (281) 80
TOK_STRINGCON (282) 81
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285) 51
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290) 18
TOK_FIELD (291)
TOK_ORD (292) 67
TOK_CHR (293) 68
TOK_ROOT (294)
TOK_RETURNVOID (295)
TOK_PARAM (296)
TOK_PROTOTYPE (297)
TOK_DECLID (298)
TOK_NEWSTRING (299)
TOK_VARDECL (300)
TOK_INDEX (301)
TOK_FUNCTION (302)
TOK_PARENS (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (68)
    on left: 8, on right: 2
structdh (69)
    on left: 9 10, on right: 8 9
fielddecl (70)
    on left: 11 12, on right: 9
basetype (71)
    on left: 13 14 15 16 17 18 19, on right: 11 12 24 25 71
function (72)
    on left: 20, on right: 3
paramhead (73)
    on left: 21 22 23, on right: 20 21
identdecl (74)
    on left: 24 25, on right: 20 21 22 37
block (75)
    on left: 26 27 28, on right: 20 31
blockhead (76)
    on left: 29 30, on right: 26 29
statement (77)
    on left: 31 32 33 34 35 36, on right: 4 29 30 38 40 41
vardecl (78)
    on left: 37, on right: 32
while (79)
    on left: 38, on right: 33
whilehead (80)
    on left: 39, on right: 38
ifelse (81)
    on left: 40 41, on right: 34
return (82)
    on left: 42 43, on right: 35
expr (83)
    on left: 44 45 46 47 48 49 50, on right: 36 37 39 40 41 42 48 51
    52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 70 71 74 75
    77 78
binop (84)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62 63, on right: 44
unop (85)
    on left: 64 65 66 67 68, on right: 45
allocator (86)
    on left: 69 70 71, on right: 46
call (87)
    on left: 72 73, on right: 47
callargs (88)
    on left: 74 75, on right: 73 75
variable (89)
    on left: 76 77 78, on right: 49
constant (90)
    on left: 79 80 81 82 83 84, on right: 50


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    $end  reduce using rule 1 (start)

    structdef  go to state 31
    structdh   go to state 32
    basetype   go to state 33
    function   go to state 34
    identdecl  go to state 35
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 38
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 51
    ';'  shift, and go to state 52


state 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


state 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


state 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


state 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


state 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


state 10

   40 ifelse: TOK_IF . '(' expr ')' statement
   41       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 53


state 11

   39 whilehead: TOK_WHILE . '(' expr ')'

    '('  shift, and go to state 54


state 12

   42 return: TOK_RETURN . expr ';'
   43       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ';'            shift, and go to state 56
    '('            shift, and go to state 30

    expr       go to state 57
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 13

   10 structdh: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 58


state 14

   82 constant: TOK_FALSE .

    $default  reduce using rule 82 (constant)


state 15

   83 constant: TOK_TRUE .

    $default  reduce using rule 83 (constant)


state 16

   84 constant: TOK_NULL .

    $default  reduce using rule 84 (constant)


state 17

   69 allocator: TOK_NEW . TOK_IDENT '(' ')'
   70          | TOK_NEW . TOK_STRING '(' expr ')'
   71          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 59
    TOK_IDENT   shift, and go to state 60
    TOK_TYPEID  shift, and go to state 22

    basetype  go to state 61


state 18

   19 basetype: TOK_IDENT .
   72 call: TOK_IDENT . '(' ')'
   73     | TOK_IDENT . callargs ')'
   76 variable: TOK_IDENT .

    '('  shift, and go to state 62

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 76 (variable)

    callargs  go to state 63


state 19

   79 constant: TOK_INTCON .

    $default  reduce using rule 79 (constant)


state 20

   80 constant: TOK_CHARCON .

    $default  reduce using rule 80 (constant)


state 21

   81 constant: TOK_STRINGCON .

    $default  reduce using rule 81 (constant)


state 22

   18 basetype: TOK_TYPEID .

    $default  reduce using rule 18 (basetype)


state 23

   67 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 64
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 24

   68 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 65
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 25

   66 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 66
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 26

   65 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 67
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 27

   64 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 68
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 28

   28 block: ';' .

    $default  reduce using rule 28 (block)


state 29

   27 block: '{' . '}'
   30 blockhead: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '}'            shift, and go to state 69
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    basetype   go to state 33
    identdecl  go to state 70
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 71
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 30

   48 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 72
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 31

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 32

    8 structdef: structdh . '}'
    9 structdh: structdh . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 73
    TOK_TYPEID  shift, and go to state 22
    '}'         shift, and go to state 74

    fielddecl  go to state 75
    basetype   go to state 76


state 33

   24 identdecl: basetype . TOK_ARRAY TOK_IDENT
   25          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 77
    TOK_IDENT  shift, and go to state 78


state 34

    3 program: program function .

    $default  reduce using rule 3 (program)


state 35

   20 function: identdecl . paramhead ')' block
   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 79
    '('  shift, and go to state 80

    paramhead  go to state 81


state 36

   31 statement: block .

    $default  reduce using rule 31 (statement)


state 37

   26 block: blockhead . '}'
   29 blockhead: blockhead . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '}'            shift, and go to state 82
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    basetype   go to state 33
    identdecl  go to state 70
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 83
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 38

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 39

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


state 40

   33 statement: while .

    $default  reduce using rule 33 (statement)


state 41

   38 while: whilehead . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    basetype   go to state 33
    identdecl  go to state 70
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 84
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 42

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


state 43

   35 statement: return .

    $default  reduce using rule 35 (statement)


state 44

   36 statement: expr . ';'
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ';'         shift, and go to state 100


state 45

   44 expr: binop .

    $default  reduce using rule 44 (expr)


state 46

   45 expr: unop .

    $default  reduce using rule 45 (expr)


state 47

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


state 48

   47 expr: call .

    $default  reduce using rule 47 (expr)


state 49

   49 expr: variable .

    $default  reduce using rule 49 (expr)


state 50

   50 expr: constant .

    $default  reduce using rule 50 (expr)


state 51

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 52

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 53

   40 ifelse: TOK_IF '(' . expr ')' statement
   41       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 101
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 54

   39 whilehead: TOK_WHILE '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 102
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 55

   72 call: TOK_IDENT . '(' ')'
   73     | TOK_IDENT . callargs ')'
   76 variable: TOK_IDENT .

    '('  shift, and go to state 62

    $default  reduce using rule 76 (variable)

    callargs  go to state 63


state 56

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


state 57

   42 return: TOK_RETURN expr . ';'
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ';'         shift, and go to state 103


state 58

   10 structdh: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 104


state 59

   17 basetype: TOK_STRING .
   70 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 105

    $default  reduce using rule 17 (basetype)


state 60

   19 basetype: TOK_IDENT .
   69 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 106

    $default  reduce using rule 19 (basetype)


state 61

   71 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 107


state 62

   72 call: TOK_IDENT '(' . ')'
   74 callargs: '(' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ')'            shift, and go to state 108
    '('            shift, and go to state 30

    expr       go to state 109
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 63

   73 call: TOK_IDENT callargs . ')'
   75 callargs: callargs . ',' expr

    ')'  shift, and go to state 110
    ','  shift, and go to state 111


state 64

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   67 unop: TOK_ORD expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 67 (unop)


state 65

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   68 unop: TOK_CHR expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 68 (unop)


state 66

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   66 unop: '+' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 66 (unop)


state 67

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   65 unop: '-' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 65 (unop)


state 68

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   64 unop: '!' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 64 (unop)


state 69

   27 block: '{' '}' .

    $default  reduce using rule 27 (block)


state 70

   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 79


state 71

   30 blockhead: '{' statement .

    $default  reduce using rule 30 (blockhead)


state 72

   48 expr: '(' expr . ')'
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ')'         shift, and go to state 112


state 73

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


state 74

    8 structdef: structdh '}' .

    $default  reduce using rule 8 (structdef)


state 75

    9 structdh: structdh fielddecl . ';'

    ';'  shift, and go to state 113


state 76

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   12          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 114
    TOK_IDENT  shift, and go to state 115


state 77

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 116


state 78

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


state 79

   37 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 117
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 80

   22 paramhead: '(' . identdecl
   23          | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 73
    TOK_TYPEID  shift, and go to state 22

    $default  reduce using rule 23 (paramhead)

    basetype   go to state 33
    identdecl  go to state 118


state 81

   20 function: identdecl paramhead . ')' block
   21 paramhead: paramhead . ',' identdecl

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


state 82

   26 block: blockhead '}' .

    $default  reduce using rule 26 (block)


state 83

   29 blockhead: blockhead statement .

    $default  reduce using rule 29 (blockhead)


state 84

   38 while: whilehead statement .

    $default  reduce using rule 38 (while)


state 85

   52 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 121
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 86

   53 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 122
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 87

   54 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 123
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 88

   55 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 124
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 89

   56 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 125
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 90

   57 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 126
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 91

   51 binop: expr TOK_IFELSE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 127
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 92

   63 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 128
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 93

   58 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 129
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 94

   59 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 130
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 95

   60 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 131
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 96

   61 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 132
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 97

   62 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 133
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 98

   77 variable: expr '.' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 134
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 99

   78 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 135
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 100

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


state 101

   40 ifelse: TOK_IF '(' expr . ')' statement
   41       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ')'         shift, and go to state 136


state 102

   39 whilehead: TOK_WHILE '(' expr . ')'
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ')'         shift, and go to state 137


state 103

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


state 104

   10 structdh: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (structdh)


state 105

   70 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 138
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 106

   69 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 139


state 107

   71 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 140
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 108

   72 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 72 (call)


state 109

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   74 callargs: '(' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99

    $default  reduce using rule 74 (callargs)


state 110

   73 call: TOK_IDENT callargs ')' .

    $default  reduce using rule 73 (call)


state 111

   75 callargs: callargs ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    '('            shift, and go to state 30

    expr       go to state 141
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 112

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


state 113

    9 structdh: structdh fielddecl ';' .

    $default  reduce using rule 9 (structdh)


state 114

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 142


state 115

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


state 116

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


state 117

   37 vardecl: identdecl '=' expr . ';'
   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ';'         shift, and go to state 143


state 118

   22 paramhead: '(' identdecl .

    $default  reduce using rule 22 (paramhead)


state 119

   20 function: identdecl paramhead ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block      go to state 144
    blockhead  go to state 37


state 120

   21 paramhead: paramhead ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 73
    TOK_TYPEID  shift, and go to state 22

    basetype   go to state 33
    identdecl  go to state 145


state 121

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   52      | expr TOK_EQ expr .
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 52 (binop)


state 122

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   53      | expr TOK_NE expr .
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 53 (binop)


state 123

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   54      | expr TOK_LT expr .
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 54 (binop)


state 124

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   55      | expr TOK_LE expr .
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 55 (binop)


state 125

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   56      | expr TOK_GT expr .
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 56 (binop)


state 126

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   57      | expr TOK_GE expr .
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94
    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 57 (binop)


state 127

   51 binop: expr . TOK_IFELSE expr
   51      | expr TOK_IFELSE expr .
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99

    $default  reduce using rule 51 (binop)


state 128

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   63      | expr '=' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ  shift, and go to state 85
    TOK_NE  shift, and go to state 86
    TOK_LT  shift, and go to state 87
    TOK_LE  shift, and go to state 88
    TOK_GT  shift, and go to state 89
    TOK_GE  shift, and go to state 90
    '='     shift, and go to state 92
    '+'     shift, and go to state 93
    '-'     shift, and go to state 94
    '*'     shift, and go to state 95
    '/'     shift, and go to state 96
    '%'     shift, and go to state 97
    '.'     shift, and go to state 98
    '['     shift, and go to state 99

    $default  reduce using rule 63 (binop)


state 129

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   58      | expr '+' expr .
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 58 (binop)


state 130

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   59      | expr '-' expr .
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96
    '%'  shift, and go to state 97
    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 59 (binop)


state 131

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   60      | expr '*' expr .
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 60 (binop)


state 132

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   61      | expr '/' expr .
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 61 (binop)


state 133

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   62      | expr '%' expr .
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    '.'  shift, and go to state 98
    '['  shift, and go to state 99

    $default  reduce using rule 62 (binop)


state 134

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   77         | expr '.' expr .
   78         | expr . '[' expr ']'

    $default  reduce using rule 77 (variable)


state 135

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'
   78         | expr '[' expr . ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ']'         shift, and go to state 146


state 136

   40 ifelse: TOK_IF '(' expr ')' . statement
   41       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    basetype   go to state 33
    identdecl  go to state 70
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 147
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 137

   39 whilehead: TOK_WHILE '(' expr ')' .

    $default  reduce using rule 39 (whilehead)


state 138

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   70 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ')'         shift, and go to state 148


state 139

   69 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (allocator)


state 140

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   71 allocator: TOK_NEW basetype '[' expr . ']'
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    ']'         shift, and go to state 149


state 141

   51 binop: expr . TOK_IFELSE expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63      | expr . '=' expr
   75 callargs: callargs ',' expr .
   77 variable: expr . '.' expr
   78         | expr . '[' expr ']'

    TOK_EQ      shift, and go to state 85
    TOK_NE      shift, and go to state 86
    TOK_LT      shift, and go to state 87
    TOK_LE      shift, and go to state 88
    TOK_GT      shift, and go to state 89
    TOK_GE      shift, and go to state 90
    TOK_IFELSE  shift, and go to state 91
    '='         shift, and go to state 92
    '+'         shift, and go to state 93
    '-'         shift, and go to state 94
    '*'         shift, and go to state 95
    '/'         shift, and go to state 96
    '%'         shift, and go to state 97
    '.'         shift, and go to state 98
    '['         shift, and go to state 99

    $default  reduce using rule 75 (callargs)


state 142

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


state 143

   37 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


state 144

   20 function: identdecl paramhead ')' block .

    $default  reduce using rule 20 (function)


state 145

   21 paramhead: paramhead ',' identdecl .

    $default  reduce using rule 21 (paramhead)


state 146

   78 variable: expr '[' expr ']' .

    $default  reduce using rule 78 (variable)


state 147

   40 ifelse: TOK_IF '(' expr ')' statement .
   41       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 150

    $default  reduce using rule 40 (ifelse)


state 148

   70 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 70 (allocator)


state 149

   71 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 71 (allocator)


state 150

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_TYPEID     shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '+'            shift, and go to state 25
    '-'            shift, and go to state 26
    '!'            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29
    '('            shift, and go to state 30

    basetype   go to state 33
    identdecl  go to state 70
    block      go to state 36
    blockhead  go to state 37
    statement  go to state 151
    vardecl    go to state 39
    while      go to state 40
    whilehead  go to state 41
    ifelse     go to state 42
    return     go to state 43
    expr       go to state 44
    binop      go to state 45
    unop       go to state 46
    allocator  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 151

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)
